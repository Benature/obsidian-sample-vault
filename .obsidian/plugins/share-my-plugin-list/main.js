/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ShareMyPluginList
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var ShareMyPluginList = class extends import_obsidian.Plugin {
  async onload() {
    this.addCommand({
      id: "generate-list",
      name: "Generate List",
      editorCallback: (editor, view) => {
        this.genList(editor);
      }
    });
    this.addCommand({
      id: "generate-table",
      name: "Generate Table",
      editorCallback: (editor, view) => {
        this.genTable(editor);
      }
    });
  }
  async genList(editor) {
    const plugins = this.getPlugins();
    let text = [];
    for (let key in plugins) {
      const m = plugins[key].manifest;
      let line = `- [**${m.name}**](https://obsidian.md/plugins?id=${m.id})`;
      if (m.author && m.authorUrl) {
        line += `by [*${m.author}*](${m.authorUrl})`;
      }
      text.push(line);
    }
    editor.replaceSelection(text.join("\n") + "\n");
  }
  async genTable(editor) {
    const plugins = this.getPlugins();
    let text = [""];
    text.push("|Plugin|Author|Version|");
    text.push("|------|------|------|");
    for (let key in plugins) {
      const m = plugins[key].manifest;
      let name = `[**${m.name}**](https://obsidian.md/plugins?id=${m.id})`;
      let author = "";
      if (m.author && m.authorUrl) {
        author = `[${m == null ? void 0 : m.author.replace(/<.*?@.*?\..*?>/g, "")}](${m == null ? void 0 : m.authorUrl})`;
      }
      text.push(`|${name}|${author}|${m == null ? void 0 : m.version}|`);
    }
    editor.replaceSelection(text.join("\n") + "\n");
  }
  getPlugins() {
    return this.app.plugins.plugins;
  }
  onunload() {
  }
};
