/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => DefaultQuery
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  defaultQuery: "-path:Diary"
};
var DefaultQuery = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new DefaultQuerySettingTab(this.app, this));
    this.resetLastDefaultQuery();
    this.app.workspace.on("file-open", (file) => {
      if (file === null) {
        return;
      }
      const searchInputContainer = document.querySelector(".workspace-leaf.mod-active .search-input-container");
      if (searchInputContainer === null) {
        return;
      }
      let style = searchInputContainer.getAttribute("style");
      style = style.replace(/display:\s?none;?/g, "");
      searchInputContainer.setAttribute("style", style);
      const input = searchInputContainer.querySelector("input");
      if (input === null) {
        return;
      }
      if (input.value && input.value != this.lastDefaultQuery[0]) {
        return;
      }
      this.resetLastDefaultQuery();
      input.value = this.settings.defaultQuery;
      var eventBlankInput = new InputEvent("input", {
        "bubbles": true,
        "cancelable": true
      });
      input.dispatchEvent(eventBlankInput);
    });
  }
  resetLastDefaultQuery() {
    this.lastDefaultQuery = [this.settings.defaultQuery];
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var DefaultQuerySettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Default query").addText((text) => text.setPlaceholder("query").setValue(this.plugin.settings.defaultQuery).onChange(async (value) => {
      this.plugin.lastDefaultQuery.push(this.plugin.settings.defaultQuery);
      this.plugin.settings.defaultQuery = value;
      await this.plugin.saveSettings();
    }));
  }
};
