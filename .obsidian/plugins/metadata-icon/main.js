/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if ((from && typeof from === "object") || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, {
          get: () => from[key],
          enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable,
        });
  }
  return to;
};
var __toCommonJS = mod =>
  __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MetadataIcon,
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  enableSnippet: true,
  propertiesVisible: "",
  propertiesInvisible: "",
  IconAttrList: [],
};
var MetadataIcon = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new MetadataHiderSettingTab(this.app, this));
  }
  onunload() {}
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
    await genSnippetCSS(this);
  }
};
function genEntryCSS(s) {
  const selector = `data-property-key="${s.entry}"`;
  let body = [
    `.metadata-property[${selector}] .metadata-property-key::after {`,
    `	content: "";`,
    `	background-image: url("${s.image}");`,
    `	background-size: 20px;`,
    `	width: 20px;`,
    `	height: 20px;`,
    `	position: absolute;`,
    `	left: 3px;`,
    `	top: 6px;`,
    `	z-index: -100;`,
    `	opacity: 0.5;`,
    `	background-repeat: no-repeat;`,
    `}`,
    `.metadata-property[${selector}] svg {`,
    `	visibility: hidden;`,
    `}`,
    ``,
  ];
  return body.join("\n");
}
async function genSnippetCSS(plugin) {
  const content = [
    "/* * WARNING: This file will be overwritten by plugin `Metadata Icon`.",
    "   * DO NOT EDIT THIS FILE DIRECTLY!!!",
    "   * Do not edit this file directly!!!",
    "*/",
    "",
  ];
  plugin.settings.IconAttrList.forEach((iconSetting, index) => {
    content.push(genEntryCSS(iconSetting));
  });
  const vault = plugin.app.vault;
  const snippets_path = vault.configDir + "/snippets";
  const css_filename = "metadata-icon-auto-gen";
  const path = `${snippets_path}/${css_filename}.css`;
  if (!(await vault.adapter.exists(snippets_path))) {
    await vault.adapter.mkdir(snippets_path);
  }
  if (await vault.adapter.exists(path)) {
    await vault.adapter.remove(path);
  }
  await plugin.app.vault.create(path, content.join("\n"));
  if (plugin.settings.enableSnippet) {
    const customCss = plugin.app.customCss;
    customCss.enabledSnippets.add(css_filename);
    customCss.requestLoadSnippets();
  }
  plugin.app.workspace.trigger("parse-style-settings");
}
var MetadataHiderSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
    this.debouncedGenerate = (0, import_obsidian.debounce)(
      this.generateSnippet,
      1e3,
      true
    );
    this.generateSnippet();
  }
  async generateSnippet() {
    await genSnippetCSS(this.plugin);
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl)
      .setName("Add custom entry icon")
      .setDesc("Input entry name and icon url.")
      .addButton(button => {
        button
          .setTooltip("Add new request")
          .setButtonText("+")
          .setCta()
          .onClick(async () => {
            this.plugin.settings.IconAttrList.push({
              entry: "",
              image: "",
            });
            await this.plugin.saveSettings();
            this.display();
          });
      });
    this.plugin.settings.IconAttrList.forEach((iconSetting, index) => {
      const s = new import_obsidian.Setting(this.containerEl)
        .addSearch(cb => {
          cb.setPlaceholder("entry name")
            .setValue(iconSetting.entry)
            .onChange(async newValue => {
              this.plugin.settings.IconAttrList[index].entry = newValue;
              await this.plugin.saveSettings();
            });
        })
        .addSearch(cb => {
          cb.setPlaceholder("image url")
            .setValue(iconSetting.image)
            .onChange(async newValue => {
              this.plugin.settings.IconAttrList[index].image = newValue;
              await this.plugin.saveSettings();
            });
        })
        .addExtraButton(cb => {
          cb.setIcon("cross")
            .setTooltip("Delete")
            .onClick(async () => {
              this.plugin.settings.IconAttrList.splice(index, 1);
              await this.plugin.saveSettings();
              this.display();
            });
        });
    });
  }
};
//# sourceMappingURL=data:application/json;base64,
